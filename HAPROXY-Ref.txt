### References 
https://www.haproxy.com/blog/the-four-essential-sections-of-an-haproxy-configuration/#:~:text=There%20are%20four%20essential%20sections,routed%20to%20your%20backend%20servers.
https://www.haproxy.com/blog/exploring-the-haproxy-stats-page/
http://fosshelp.blogspot.com/2016/11/how-to-create-pem-file-for-haproxy.html
>>> Generating certificates
https://www.haproxy.com/blog/introduction-to-haproxy-logging/


>>>> File path 
/etc/haproxy/haproxy.cfg

#### Structure of haproxy.conf
    global
        # global settings here

    defaults
        # defaults here

    frontend
        # a frontend that accepts requests from clients

    backend
        # servers that fulfill the requests

>>> Validate file 
haproxy -c -f /etc/haproxy/haproxy.cfg



#### Global
Settings under global define process-wide security and performance tunings that affect HAProxy at a low level.

global
    maxconn 50000       # The maxconn setting limits the maximum number of connections that HAProxy will accept. 
                        # Its purpose is to protect your load balancer from running out of memory

    log /dev/log local0 # The log setting ensures that warnings emitted during startup and issues that arise during runtime get logged to syslog. 
                        # It also logs requests as they come through

    user haproxy        # The user and group lines tell HAProxy to drop privileges after initialization. 
    group haproxy       # Linux requires processes to be root in order to listen on ports below 1024
    
    stats socket /run/haproxy/admin.sock user haproxy group haproxy mode 660 level admin
                        # The stats socket line enables the Runtime API, which you can use to dynamically disable servers and health checks

    nbproc 2            # The nbproc and nbthread settings specify the number of processes and threads, respectively, 
    nbthread 4          # that HAProxy should spawn on startup. This can increase the efficiency of your load balancer.

    
    cpu-map auto:1/1-4 0-3

                        # The ssl-default-bind-ciphers setting enumerates the SSL and TLS ciphers that every bind directive will use by default.
    ssl-default-bind-ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256
                        # The ssl-default-bind-options setting configures SSL/TLS options such as ssl-min-ver to disable support for older protocols. 
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

#### Defaults
As your configuration grows, using a defaults section will help reduce duplication. Its settings apply to all of the frontend and backend sections that come after it. 
You’re still free to override those settings within the sections that follow.

defaults 
    # When operating HAProxy in TCP mode, which is set with mode tcp, timeout server should be the same as timeout client
    timeout connect 10s    # setting configures the time that HAProxy will wait for a TCP connection to a backend server to be established.
    timeout client 30s     # setting measures inactivity during periods that we would expect the client to be speaking
    timeout server 30s     # setting measures inactivity when we’d expect the backend server to be speaking.
    log global             # The log global setting is a way of telling each subsequent frontend to use the log setting that you defined in the global section.
    mode http              # The mode setting defines whether HAProxy operates as a simple TCP proxy or if it’s able to inspect incoming traffic’s higher-level HTTP messages.
    option httplog         # The option httplog setting, or more rarely option tcplog, tells HAProxy to use a more verbose log format when sending messages to Syslog. 
    maxconn 3000           # The maxconn setting limits the number of connection that each frontend will accept and, by default, is set to 2000.


#### Frontend
When you place HAProxy as a reverse proxy in front of your backend servers, a frontend section defines the IP addresses and ports that clients can connect to

frontend www.mysite.com
    bind 10.0.0.3:80 # A bind setting assigns a listener to a given IP address and port. 
                     # The IP can be omitted to bind to all IP addresses on the server and a port can be a single port, a range, or a comma-delimited list.
    bind 10.0.0.3:443 ssl crt /etc/ssl/certs/mysite.pem  # You’ll often use the ssl and crt arguments to instruct HAProxy to manage SSL/TLS terminations, 
                                                         # rather than having your web servers doing that
    http-request redirect scheme https unless { ssl_fc } # A http-request redirect setting responds to the client that they should try a different URL.
    use_backend api_servers if { path_beg /api/ }        # The use_backend setting chooses a backend pool of servers to respond to incoming requests if a given condition is true.
    default_backend web_servers      # The default_backend setting is found in nearly every frontend and gives the name of a backend to send traffic to if a use_backend



#### Backend
A backend section defines a group of servers that will be load balanced and assigned to handle requests.

backend web_servers
    balance roundrobin # The balance setting controls how HAProxy will select the server to respond to the request if no persistence method overrides that selection.
                       # - roundrobin, which just picks the next server and starts over at the top of the list again
                       # - leastconn, where HAProxy selects the server with the fewest active sessions.
    cookie SERVERUSED insert indirect nocache   # The cookie setting enables cookie-based persistence. It tells HAProxy to send a cookie named SERVERUSED to the client
    option httpchk HEAD /  # The option httpchk setting causes HAProxy to send Layer 7 (HTTP) health checks instead of Layer 4 (TCP) checks to your backend servers.
    default-server check maxconn 20  # The default-server setting configures defaults for any server lines that follow, such as enabling health checks, max connections, etc.
    server server1 10.0.1.3:80 cookie server1  # The server setting is the heart of the backend.
    server server2 10.0.1.4:80 cookie server2



#### Listen
As you’ve seen, frontend and backend sections receive traffic and send it to a pool of servers. You can also use listen sections to do the same thing. 
They, essentially, combine the functionality of a frontend and backend into one. 



listen stats
    bind *:8404
    stats enable
    stats uri /monitor
    stats refresh 5s